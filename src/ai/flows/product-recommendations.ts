// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends products to the user based on chat history and current product view.
 *
 * - getProductRecommendations - A function that returns product recommendations.
 * - GetProductRecommendationsInput - The input type for the getProductRecommendations function.
 * - GetProductRecommendationsOutput - The return type for the getProductRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetProductRecommendationsInputSchema = z.object({
  chatHistory: z
    .string()
    .describe('The chat history between the user and the chatbot.'),
  currentProductView: z
    .string()
    .describe('The name or description of the product currently being viewed.'),
});
export type GetProductRecommendationsInput = z.infer<
  typeof GetProductRecommendationsInputSchema
>;

const GetProductRecommendationsOutputSchema = z.object({
  recommendedProducts: z
    .array(z.string())
    .describe('A list of recommended product names or descriptions.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the product recommendations.'),
});
export type GetProductRecommendationsOutput = z.infer<
  typeof GetProductRecommendationsOutputSchema
>;

export async function getProductRecommendations(
  input: GetProductRecommendationsInput
): Promise<GetProductRecommendationsOutput> {
  return productRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'productRecommendationsPrompt',
  input: {schema: GetProductRecommendationsInputSchema},
  output: {schema: GetProductRecommendationsOutputSchema},
  prompt: `You are an e-commerce product recommendation expert.

Based on the user's chat history and the product they are currently viewing, you will recommend a list of related products.

Chat History: {{{chatHistory}}}
Current Product View: {{{currentProductView}}}

Reasoning:
First, you must walk through your reasoning for the product recommendations, as a single paragraph. Be specific as possible, and draw connections between the chat history, the current product view, and the recommended products. 

Recommended Products: List the recommended products. They should be extremely relevant to the user.

Output the reasoning and recommended products in the JSON format specified by the output schema.
`,
});

const productRecommendationsFlow = ai.defineFlow(
  {
    name: 'productRecommendationsFlow',
    inputSchema: GetProductRecommendationsInputSchema,
    outputSchema: GetProductRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
